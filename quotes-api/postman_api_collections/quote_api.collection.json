{
	"info": {
		"_postman_id": "cafeb14b-4969-44dc-942a-1e95bfa4a9ab",
		"name": "express-notes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "200 - OK",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should provide a success message\", () => {\r",
									"    const resJson = pm.response.json()\r",
									"\r",
									"    pm.expect(resJson.message).to.include(\"success\")\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "all quotes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Receive data from database\", () => {\r",
									"    const responseJson = pm.response.json()\r",
									"    pm.expect(responseJson.length).to.be.greaterThan(1)\r",
									"})\r",
									"\r",
									"pm.test(\"More than one quotes if received\", () => {\r",
									"    const resJson = pm.response.json()\r",
									"    pm.expect(resJson.length).to.be.greaterThan(0)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/quotes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"quotes"
							]
						},
						"description": "get all quotes from database"
					},
					"response": []
				},
				{
					"name": "quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// set an variable from the first id in get quotes response\r",
									"const resJson = pm.response.json()\r",
									"pm.environment.set(\"quoteID\", resJson.quote._id)\r",
									"\r",
									"postman.setNextRequest(\"single quote\")\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quote\": \"You mirin br jkbsdk kjbdah\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/quote",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"quote"
							]
						}
					},
					"response": []
				},
				{
					"name": "single quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Receive data from database\", () => {\r",
									"    const responseJson = pm.response.json()\r",
									"    pm.expect(typeof responseJson.user).to.eql(\"string\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/quote/{{quoteID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"quote",
								"{{quoteID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "quotes from a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get all quotes from a particular use', () => {\r",
									"    const json = pm.response.json()\r",
									"    pm.expect(json.length).to.be.greaterThan(1)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/quotes/{{username}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"quotes",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "a quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/quote/61eb310f1341d19a2b978cf2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"quote",
								"61eb310f1341d19a2b978cf2"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('should login', () => {",
							"    pm.response.to.have.status(200)",
							"})",
							""
						]
					}
				}
			]
		},
		{
			"name": "400 - 500 - Error",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 - incorrect username and password\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"234489y430y5\",\r\n    \"password\": \"3409y48934y\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "incorrect quote body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"qute\": \"You mirin br jkbsdk kjbdah\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/quote",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"quote"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('provide an error property in json', () => {",
							"    const resJson = pm.response.json()",
							"    ",
							"    pm.expect(resJson.error).not.to.be.undefined",
							"})"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test('Response time should be less that 3000ms', () => {",
					"    pm.expect(pm.response.responseTime).to.be.below(3000);",
					"})"
				]
			}
		}
	]
}